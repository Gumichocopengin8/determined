// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// source: determined/api/v1/run.proto

package apiv1

import (
	commonv1 "github.com/determined-ai/determined/proto/pkg/commonv1"
	experimentv1 "github.com/determined-ai/determined/proto/pkg/experimentv1"
	trialv1 "github.com/determined-ai/determined/proto/pkg/trialv1"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sorts experiments by the given field.
type GetRunsRequest_SortBy int32

const (
	// Returns experiments in an unsorted list.
	GetRunsRequest_SORT_BY_UNSPECIFIED GetRunsRequest_SortBy = 0
	// Returns experiments sorted by id.
	GetRunsRequest_SORT_BY_ID GetRunsRequest_SortBy = 1
	// Returns experiments sorted by description.
	GetRunsRequest_SORT_BY_DESCRIPTION GetRunsRequest_SortBy = 2
	// Return experiments sorted by start time.
	GetRunsRequest_SORT_BY_START_TIME GetRunsRequest_SortBy = 4
	// Return experiments sorted by end time. Experiments without end_time are
	// returned after the ones with end_time.
	GetRunsRequest_SORT_BY_END_TIME GetRunsRequest_SortBy = 5
	// Return experiments sorted by state.
	GetRunsRequest_SORT_BY_STATE GetRunsRequest_SortBy = 6
	// Return experiments sorted by number of trials.
	GetRunsRequest_SORT_BY_NUM_TRIALS GetRunsRequest_SortBy = 8
	// Return experiments sorted by progress.
	GetRunsRequest_SORT_BY_PROGRESS GetRunsRequest_SortBy = 9
	// Return experiments sorted by user.
	GetRunsRequest_SORT_BY_USER GetRunsRequest_SortBy = 10
	// Returns experiments sorted by name.
	GetRunsRequest_SORT_BY_NAME GetRunsRequest_SortBy = 11
	// Returns experiments sorted by originating model.
	GetRunsRequest_SORT_BY_FORKED_FROM GetRunsRequest_SortBy = 12
	// Returns experiments sorted by resource pool.
	GetRunsRequest_SORT_BY_RESOURCE_POOL GetRunsRequest_SortBy = 13
	// Returns experiments sorted by project.
	GetRunsRequest_SORT_BY_PROJECT_ID GetRunsRequest_SortBy = 14
	// Returns experiments sorted by checkpoint size.
	GetRunsRequest_SORT_BY_CHECKPOINT_SIZE GetRunsRequest_SortBy = 15
	// Returns experiments sorted by checkpoint count.
	GetRunsRequest_SORT_BY_CHECKPOINT_COUNT GetRunsRequest_SortBy = 16
	// Returns experiments sorted by searcher metric value..
	GetRunsRequest_SORT_BY_SEARCHER_METRIC_VAL GetRunsRequest_SortBy = 17
)

// Enum value maps for GetRunsRequest_SortBy.
var (
	GetRunsRequest_SortBy_name = map[int32]string{
		0:  "SORT_BY_UNSPECIFIED",
		1:  "SORT_BY_ID",
		2:  "SORT_BY_DESCRIPTION",
		4:  "SORT_BY_START_TIME",
		5:  "SORT_BY_END_TIME",
		6:  "SORT_BY_STATE",
		8:  "SORT_BY_NUM_TRIALS",
		9:  "SORT_BY_PROGRESS",
		10: "SORT_BY_USER",
		11: "SORT_BY_NAME",
		12: "SORT_BY_FORKED_FROM",
		13: "SORT_BY_RESOURCE_POOL",
		14: "SORT_BY_PROJECT_ID",
		15: "SORT_BY_CHECKPOINT_SIZE",
		16: "SORT_BY_CHECKPOINT_COUNT",
		17: "SORT_BY_SEARCHER_METRIC_VAL",
	}
	GetRunsRequest_SortBy_value = map[string]int32{
		"SORT_BY_UNSPECIFIED":         0,
		"SORT_BY_ID":                  1,
		"SORT_BY_DESCRIPTION":         2,
		"SORT_BY_START_TIME":          4,
		"SORT_BY_END_TIME":            5,
		"SORT_BY_STATE":               6,
		"SORT_BY_NUM_TRIALS":          8,
		"SORT_BY_PROGRESS":            9,
		"SORT_BY_USER":                10,
		"SORT_BY_NAME":                11,
		"SORT_BY_FORKED_FROM":         12,
		"SORT_BY_RESOURCE_POOL":       13,
		"SORT_BY_PROJECT_ID":          14,
		"SORT_BY_CHECKPOINT_SIZE":     15,
		"SORT_BY_CHECKPOINT_COUNT":    16,
		"SORT_BY_SEARCHER_METRIC_VAL": 17,
	}
)

func (x GetRunsRequest_SortBy) Enum() *GetRunsRequest_SortBy {
	p := new(GetRunsRequest_SortBy)
	*p = x
	return p
}

func (x GetRunsRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRunsRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_determined_api_v1_run_proto_enumTypes[0].Descriptor()
}

func (GetRunsRequest_SortBy) Type() protoreflect.EnumType {
	return &file_determined_api_v1_run_proto_enumTypes[0]
}

func (x GetRunsRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetRunsRequest_SortBy.Descriptor instead.
func (GetRunsRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_determined_api_v1_run_proto_rawDescGZIP(), []int{2, 0}
}

// Request to prepare to start reporting to a run.
type RunPrepareForReportingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RunID to sync to.
	RunId int32 `protobuf:"varint,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Checkpoint storage config.
	CheckpointStorage *_struct.Struct `protobuf:"bytes,2,opt,name=checkpoint_storage,json=checkpointStorage,proto3,oneof" json:"checkpoint_storage,omitempty"`
}

func (x *RunPrepareForReportingRequest) Reset() {
	*x = RunPrepareForReportingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_run_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPrepareForReportingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPrepareForReportingRequest) ProtoMessage() {}

func (x *RunPrepareForReportingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_run_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPrepareForReportingRequest.ProtoReflect.Descriptor instead.
func (*RunPrepareForReportingRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_run_proto_rawDescGZIP(), []int{0}
}

func (x *RunPrepareForReportingRequest) GetRunId() int32 {
	if x != nil {
		return x.RunId
	}
	return 0
}

func (x *RunPrepareForReportingRequest) GetCheckpointStorage() *_struct.Struct {
	if x != nil {
		return x.CheckpointStorage
	}
	return nil
}

// Response to prepare to start reporting to a run.
type RunPrepareForReportingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The storage_id to be used when creating new checkpoints. This will be
	// returned always when checkpoint storage is set in the request.
	StorageId *int32 `protobuf:"varint,1,opt,name=storage_id,json=storageId,proto3,oneof" json:"storage_id,omitempty"`
}

func (x *RunPrepareForReportingResponse) Reset() {
	*x = RunPrepareForReportingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_run_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPrepareForReportingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPrepareForReportingResponse) ProtoMessage() {}

func (x *RunPrepareForReportingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_run_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPrepareForReportingResponse.ProtoReflect.Descriptor instead.
func (*RunPrepareForReportingResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_run_proto_rawDescGZIP(), []int{1}
}

func (x *RunPrepareForReportingResponse) GetStorageId() int32 {
	if x != nil && x.StorageId != nil {
		return *x.StorageId
	}
	return 0
}

// Get a list of runs.
type GetRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sort experiments by the given field.
	SortBy GetRunsRequest_SortBy `protobuf:"varint,1,opt,name=sort_by,json=sortBy,proto3,enum=determined.api.v1.GetRunsRequest_SortBy" json:"sort_by,omitempty"`
	// Order experiments in either ascending or descending order.
	OrderBy OrderBy `protobuf:"varint,2,opt,name=order_by,json=orderBy,proto3,enum=determined.api.v1.OrderBy" json:"order_by,omitempty"`
	// Skip the number of experiments before returning results. Negative values
	// denote number of experiments to skip from the end before returning results.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit the number of experiments.
	// 0 or Unspecified - returns a default of 100.
	// -1               - returns everything.
	// -2               - returns pagination info but no experiments.
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Limit experiments to those that match the description.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Limit experiments to those that match the name.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Limit experiments to those that match the provided labels.
	Labels []string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	// Limit experiments to those that are archived.
	Archived *wrappers.BoolValue `protobuf:"bytes,7,opt,name=archived,proto3" json:"archived,omitempty"`
	// Limit experiments to those that match the provided state.
	States []experimentv1.State `protobuf:"varint,8,rep,packed,name=states,proto3,enum=determined.experiment.v1.State" json:"states,omitempty"`
	// Limit experiments to those that are owned by users with the specified
	// usernames.
	Users []string `protobuf:"bytes,9,rep,name=users,proto3" json:"users,omitempty"`
	// Limit experiments to those that are owned by users with the specified
	// userIds.
	UserIds []int32 `protobuf:"varint,11,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Limit experiments to those within a specified project, or 0 for all
	// projects.
	ProjectId int32 `protobuf:"varint,12,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// filtering by experiment ids
	RunIdFilter *commonv1.Int32FieldFilter `protobuf:"bytes,13,opt,name=run_id_filter,json=runIdFilter,proto3" json:"run_id_filter,omitempty"`
	// whether to surface trial specific data from the best trial
	ShowTrialData bool `protobuf:"varint,14,opt,name=show_trial_data,json=showTrialData,proto3" json:"show_trial_data,omitempty"`
}

func (x *GetRunsRequest) Reset() {
	*x = GetRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_run_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunsRequest) ProtoMessage() {}

func (x *GetRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_run_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunsRequest.ProtoReflect.Descriptor instead.
func (*GetRunsRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_run_proto_rawDescGZIP(), []int{2}
}

func (x *GetRunsRequest) GetSortBy() GetRunsRequest_SortBy {
	if x != nil {
		return x.SortBy
	}
	return GetRunsRequest_SORT_BY_UNSPECIFIED
}

func (x *GetRunsRequest) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_ORDER_BY_UNSPECIFIED
}

func (x *GetRunsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRunsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRunsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetRunsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRunsRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetRunsRequest) GetArchived() *wrappers.BoolValue {
	if x != nil {
		return x.Archived
	}
	return nil
}

func (x *GetRunsRequest) GetStates() []experimentv1.State {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *GetRunsRequest) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetRunsRequest) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetRunsRequest) GetProjectId() int32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetRunsRequest) GetRunIdFilter() *commonv1.Int32FieldFilter {
	if x != nil {
		return x.RunIdFilter
	}
	return nil
}

func (x *GetRunsRequest) GetShowTrialData() bool {
	if x != nil {
		return x.ShowTrialData
	}
	return false
}

// Response to GetExperimentsRequest.
type GetRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of returned experiments.
	Runs []*trialv1.Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *GetRunsResponse) Reset() {
	*x = GetRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_run_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunsResponse) ProtoMessage() {}

func (x *GetRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_run_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunsResponse.ProtoReflect.Descriptor instead.
func (*GetRunsResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_run_proto_rawDescGZIP(), []int{3}
}

func (x *GetRunsResponse) GetRuns() []*trialv1.Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

var File_determined_api_v1_run_proto protoreflect.FileDescriptor

var file_determined_api_v1_run_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xaa, 0x01, 0x0a, 0x1d, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2, 0x01, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x1e,
	0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x3a, 0x05, 0x92, 0x41, 0x02, 0x0a, 0x00, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xc3, 0x07, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x35,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x85, 0x03, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f,
	0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42,
	0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44,
	0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x0f, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x56, 0x41, 0x4c, 0x10, 0x11, 0x22, 0x5a,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x3a,
	0x19, 0x92, 0x41, 0x16, 0x0a, 0x14, 0xd2, 0x01, 0x04, 0x72, 0x75, 0x6e, 0x73, 0xd2, 0x01, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2d, 0x61, 0x69, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_determined_api_v1_run_proto_rawDescOnce sync.Once
	file_determined_api_v1_run_proto_rawDescData = file_determined_api_v1_run_proto_rawDesc
)

func file_determined_api_v1_run_proto_rawDescGZIP() []byte {
	file_determined_api_v1_run_proto_rawDescOnce.Do(func() {
		file_determined_api_v1_run_proto_rawDescData = protoimpl.X.CompressGZIP(file_determined_api_v1_run_proto_rawDescData)
	})
	return file_determined_api_v1_run_proto_rawDescData
}

var file_determined_api_v1_run_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_determined_api_v1_run_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_determined_api_v1_run_proto_goTypes = []interface{}{
	(GetRunsRequest_SortBy)(0),             // 0: determined.api.v1.GetRunsRequest.SortBy
	(*RunPrepareForReportingRequest)(nil),  // 1: determined.api.v1.RunPrepareForReportingRequest
	(*RunPrepareForReportingResponse)(nil), // 2: determined.api.v1.RunPrepareForReportingResponse
	(*GetRunsRequest)(nil),                 // 3: determined.api.v1.GetRunsRequest
	(*GetRunsResponse)(nil),                // 4: determined.api.v1.GetRunsResponse
	(*_struct.Struct)(nil),                 // 5: google.protobuf.Struct
	(OrderBy)(0),                           // 6: determined.api.v1.OrderBy
	(*wrappers.BoolValue)(nil),             // 7: google.protobuf.BoolValue
	(experimentv1.State)(0),                // 8: determined.experiment.v1.State
	(*commonv1.Int32FieldFilter)(nil),      // 9: determined.common.v1.Int32FieldFilter
	(*trialv1.Run)(nil),                    // 10: determined.trial.v1.Run
}
var file_determined_api_v1_run_proto_depIdxs = []int32{
	5,  // 0: determined.api.v1.RunPrepareForReportingRequest.checkpoint_storage:type_name -> google.protobuf.Struct
	0,  // 1: determined.api.v1.GetRunsRequest.sort_by:type_name -> determined.api.v1.GetRunsRequest.SortBy
	6,  // 2: determined.api.v1.GetRunsRequest.order_by:type_name -> determined.api.v1.OrderBy
	7,  // 3: determined.api.v1.GetRunsRequest.archived:type_name -> google.protobuf.BoolValue
	8,  // 4: determined.api.v1.GetRunsRequest.states:type_name -> determined.experiment.v1.State
	9,  // 5: determined.api.v1.GetRunsRequest.run_id_filter:type_name -> determined.common.v1.Int32FieldFilter
	10, // 6: determined.api.v1.GetRunsResponse.runs:type_name -> determined.trial.v1.Run
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_determined_api_v1_run_proto_init() }
func file_determined_api_v1_run_proto_init() {
	if File_determined_api_v1_run_proto != nil {
		return
	}
	file_determined_api_v1_pagination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_determined_api_v1_run_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPrepareForReportingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_run_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPrepareForReportingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_run_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_run_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_determined_api_v1_run_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_determined_api_v1_run_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_determined_api_v1_run_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_determined_api_v1_run_proto_goTypes,
		DependencyIndexes: file_determined_api_v1_run_proto_depIdxs,
		EnumInfos:         file_determined_api_v1_run_proto_enumTypes,
		MessageInfos:      file_determined_api_v1_run_proto_msgTypes,
	}.Build()
	File_determined_api_v1_run_proto = out.File
	file_determined_api_v1_run_proto_rawDesc = nil
	file_determined_api_v1_run_proto_goTypes = nil
	file_determined_api_v1_run_proto_depIdxs = nil
}
